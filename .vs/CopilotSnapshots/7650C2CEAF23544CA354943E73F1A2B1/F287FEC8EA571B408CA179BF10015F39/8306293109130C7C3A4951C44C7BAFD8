"use client";
import React, { useState, useEffect } from "react";
import PurchaseOrderTable from "./PurchaseOrderTable";
import AddOrderModal from "./AddOrderModal";
import OrderDetailsModal from "./OrderDetailsModal";

function PurchaseOrderManagement() {
  const [showAddModal, setShowAddModal] = useState(false);
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [orders, setOrders] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const apiUrl = process.env.NEXT_PUBLIC_API_URL;

  // Fetch all inbound orders on mount
  useEffect(() => {
    const fetchOrders = async () => {
      setIsLoading(true);
      const token = localStorage.getItem("token");
      if (!token) {
        alert("You are not logged in. Please log in to view inbound orders.");
        setIsLoading(false);
        return;
      }
      try {
        const response = await fetch(`${apiUrl}/api/inbound`, {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        });
        if (!response.ok) {
          throw new Error("Failed to fetch inbound orders.");
        }
        const data = await response.json();
        // Map backend fields to frontend fields
        const mapped = data.map((item) => ({
          orderID: item.InboundOrderID || item.orderID, // fallback for compatibility
          supplierID: item.SupplierID,
          employeeID: item.EmployeeID,
          date: item.DateOfReceipt,
          amount: item.TotalAmount,
          notes: item.Notes,
        }));
        setOrders(mapped);
      } catch (err) {
        alert(err.message || "Error fetching inbound orders.");
      } finally {
        setIsLoading(false);
      }
    };
    fetchOrders();
  }, [apiUrl]);

  const toggleAddModal = () => {
    setShowAddModal(!showAddModal);
  };

  // Add a new inbound order using backend
  const addNewOrder = async (newOrder) => {
    const token = localStorage.getItem("token");
    if (!token) {
      alert("You are not logged in. Please log in to add orders.");
      return;
    }
    // Map frontend fields to backend fields
    const payload = {
      InboundOrderID: newOrder.orderID,
      SupplierID: newOrder.supplierID,
      EmployeeID: newOrder.employeeID,
      DateOfReceipt: newOrder.date,
      TotalAmount: newOrder.amount,
      Notes: newOrder.notes,
    };
    try {
      const response = await fetch(`${apiUrl}/api/inbound`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
      });
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "Failed to add inbound order.");
      }
      setOrders((prev) => [...prev, newOrder]);
      setShowAddModal(false);
    } catch (err) {
      alert(err.message || "Error adding inbound order.");
    }
  };

  // Remove (deactivate) an order using backend
  const removeOrder = async (orderID) => {
    if (!window.confirm("Are you sure you want to remove this order?")) return;
    const token = localStorage.getItem("token");
    if (!token) {
      alert("You are not logged in. Please log in to remove orders.");
      return;
    }
    try {
      const response = await fetch(`${apiUrl}/api/inbound/${orderID}/deActive`, {
        method: "PUT",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "Failed to remove order.");
      }
      setOrders((prev) => prev.filter((order) => order.orderID !== orderID));
    } catch (err) {
      alert(err.message || "Error removing order.");
    }
  };

  const showOrderDetails = (order) => {
    setSelectedOrder(order);
  };

  return (
    <section className="p-5 max-sm:p-2.5">
      <header className="flex justify-between items-center mb-5">
        <h1 className="pb-2 text-2xl font-semibold text-red-600 border-solid border-b-[3px] border-b-red-600">
          Inbound Orders
        </h1>
        <button
          className="px-5 py-2.5 text-sm font-medium bg-red-600 rounded cursor-pointer border-[none] text-white"
          onClick={toggleAddModal}
        >
          Add New Order
        </button>
      </header>
      {isLoading ? (
        <div>Loading...</div>
      ) : (
        <PurchaseOrderTable
          orders={orders}
          onRemoveOrder={removeOrder}
          onShowDetails={showOrderDetails}
        />
      )}
      <OrderDetailsModal
        order={selectedOrder}
        onClose={() => setSelectedOrder(null)}
      />
      {showAddModal && (
        <AddOrderModal onClose={toggleAddModal} onAddOrder={addNewOrder} />
      )}
    </section>
  );
}

export default PurchaseOrderManagement;
