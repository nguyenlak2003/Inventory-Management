
const express = require('express');
const router = express.Router();
const { poolPromise, sql } = require('../db');
const { authenticateToken } = require('../tools/authMiddleware');

router.use(authenticateToken);

// Get all active inbound orders
router.get('/', async (req, res) => {
    try {
        const pool = await poolPromise;
        const result = await pool.request()
            .query(`SELECT 
                InboundOrderID,
                SupplierID,
                EmployeeID,
                DateOfReceipt,
                TotalAmount,
                Notes,
                IsActive
            FROM InboundOrders
            WHERE IsActive = 1`);
        res.json(result.recordset);
    } catch (err) {
        console.error('Error fetching inbound orders:', err.message);
        res.status(500).json({ message: 'Server error fetching inbound orders.' });
    }
});

// Create a new inbound order
router.post('/', async (req, res) => {
    const { SupplierID, EmployeeID, DateOfReceipt, TotalAmount, Notes } = req.body;
    try {
        const pool = await poolPromise;
        const result = await pool.request()
            .input('SupplierID', sql.VarChar, SupplierID)
            .input('EmployeeID', sql.VarChar, EmployeeID)
            .input('DateOfReceipt', sql.DateTime, DateOfReceipt)
            .input('TotalAmount', sql.Decimal(18, 2), TotalAmount)
            .input('Notes', sql.NVarChar(sql.MAX), Notes)
            .query(`INSERT INTO InboundOrders (SupplierID, EmployeeID, DateOfReceipt, TotalAmount, Notes)
                    VALUES (@SupplierID, @EmployeeID, @DateOfReceipt, @TotalAmount, @Notes)`);
        res.json({ message: 'Inbound order created successfully.' });
    } catch (err) {
        console.error('Error creating inbound order:', err.message);
        res.status(500).json({ message: 'Server error creating inbound order.' });
    }
});

// Update an inbound order
router.put('/:inboundOrderID', async (req, res) => {
    const { inboundOrderID } = req.params;
    const { SupplierID, EmployeeID, DateOfReceipt, TotalAmount, Notes } = req.body;
    try {
        const pool = await poolPromise;
        const result = await pool.request()
            .input('InboundOrderID', sql.VarChar, inboundOrderID)
            .input('SupplierID', sql.VarChar, SupplierID)
            .input('EmployeeID', sql.VarChar, EmployeeID)
            .input('DateOfReceipt', sql.DateTime, DateOfReceipt)
            .input('TotalAmount', sql.Decimal(18, 2), TotalAmount)
            .input('Notes', sql.NVarChar(sql.MAX), Notes)
            .query(`UPDATE InboundOrders
                    SET SupplierID = @SupplierID,
                        EmployeeID = @EmployeeID,
                        DateOfReceipt = @DateOfReceipt,
                        TotalAmount = @TotalAmount,
                        Notes = @Notes
                    WHERE InboundOrderID = @InboundOrderID`);
        if (result.rowsAffected[0] > 0) {
            res.json({ message: 'Inbound order updated successfully.' });
        } else {
            res.status(404).json({ message: `Inbound order with ID ${inboundOrderID} not found.` });
        }
    } catch (err) {
        console.error('Error updating inbound order:', err.message);
        res.status(500).json({ message: 'Server error updating inbound order.' });
    }
});

// Deactivate (soft delete) an inbound order
router.put('/:inboundOrderID/deActive', async (req, res) => {
    const { inboundOrderID } = req.params;
    try {
        const pool = await poolPromise;
        const result = await pool.request()
            .input('InboundOrderID', sql.VarChar, inboundOrderID)
            .query(`UPDATE InboundOrders SET IsActive = 0 WHERE InboundOrderID = @InboundOrderID`);
        if (result.rowsAffected[0] > 0) {
            res.json({ message: 'Inbound order deactivated successfully.' });
        } else {
            res.status(404).json({ message: `Inbound order with ID ${inboundOrderID} not found.` });
        }
    } catch (err) {
        console.error('Error deactivating inbound order:', err.message);
        res.status(500).json({ message: 'Server error deactivating inbound order.' });
    }
});

// Get next InboundOrderID (UUID, so just return NEWID())
router.get('/next-code', async (req, res) => {
    try {
        const pool = await poolPromise;
        const result = await pool.request()
            .query(`SELECT CONVERT(VARCHAR(50), NEWID()) AS nextCode`);
        res.json({ nextCode: result.recordset[0].nextCode });
    } catch (err) {
        console.error('Error generating next inbound order code:', err.message);
        res.status(500).json({ message: 'Server error generating next inbound order code.' });
    }
});

module.exports = router;
